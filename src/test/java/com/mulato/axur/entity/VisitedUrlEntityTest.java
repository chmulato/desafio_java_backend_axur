package com.mulato.axur.entity;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.*;

class VisitedUrlEntityTest {

    private VisitedUrlEntity visitedUrlEntity;
    private String testTaskId;
    private String testUrl;

    @BeforeEach
    void setUp() {
        testTaskId = "test-123";
        testUrl = "http://example.com/visited";
        visitedUrlEntity = new VisitedUrlEntity(testTaskId, testUrl);
    }

    @Test
    void testConstructorWithParameters() {
        // When
        VisitedUrlEntity entity = new VisitedUrlEntity(testTaskId, testUrl);

        // Then
        assertEquals(testTaskId, entity.getTaskId());
        assertEquals(testUrl, entity.getUrl());
        assertNotNull(entity.getVisitedAt());
        assertNull(entity.getId()); // ID is generated by database
    }

    @Test
    void testDefaultConstructor() {
        // When
        VisitedUrlEntity entity = new VisitedUrlEntity();

        // Then
        assertNull(entity.getId());
        assertNull(entity.getTaskId());
        assertNull(entity.getUrl());
        assertNull(entity.getVisitedAt());
    }

    @Test
    void testSettersAndGetters() {
        // Given
        VisitedUrlEntity entity = new VisitedUrlEntity();
        Long testId = 1L;
        LocalDateTime testTime = LocalDateTime.now();

        // When
        entity.setId(testId);
        entity.setTaskId("new-task-id");
        entity.setUrl("http://new-visited-url.com");
        entity.setVisitedAt(testTime);

        // Then
        assertEquals(testId, entity.getId());
        assertEquals("new-task-id", entity.getTaskId());
        assertEquals("http://new-visited-url.com", entity.getUrl());
        assertEquals(testTime, entity.getVisitedAt());
    }

    @Test
    void testVisitedAtSetAutomatically() {
        // Given
        LocalDateTime beforeCreation = LocalDateTime.now().minusSeconds(1);
        
        // When
        VisitedUrlEntity entity = new VisitedUrlEntity(testTaskId, testUrl);
        
        // Then
        LocalDateTime afterCreation = LocalDateTime.now().plusSeconds(1);
        assertTrue(entity.getVisitedAt().isAfter(beforeCreation));
        assertTrue(entity.getVisitedAt().isBefore(afterCreation));
    }

    @Test
    void testEqualsAndHashCode() {
        // Given
        VisitedUrlEntity entity1 = new VisitedUrlEntity(testTaskId, testUrl);
        entity1.setId(1L);
        
        VisitedUrlEntity entity2 = new VisitedUrlEntity(testTaskId, testUrl);
        entity2.setId(1L);
        
        VisitedUrlEntity entity3 = new VisitedUrlEntity(testTaskId, testUrl);
        entity3.setId(2L);

        // Test reflexivity
        assertEquals(entity1, entity1);
        
        // Test symmetry (assuming equals is based on ID)
        assertEquals(entity1, entity2);
        assertEquals(entity2, entity1);
        
        // Test with different objects
        assertNotEquals(entity1, entity3);
        assertNotEquals(entity1, null);
        assertNotEquals(entity1, "string");
    }

    @Test
    void testToString() {
        // When
        String toString = visitedUrlEntity.toString();

        // Then
        assertNotNull(toString);
        assertTrue(toString.contains(testTaskId));
        assertTrue(toString.contains(testUrl));
    }

    @Test
    void testWithLongUrl() {
        // Given
        String longUrl = "http://example.com/" + "b".repeat(900); // Test with long URL
        
        // When
        VisitedUrlEntity entity = new VisitedUrlEntity(testTaskId, longUrl);
        
        // Then
        assertEquals(testTaskId, entity.getTaskId());
        assertEquals(longUrl, entity.getUrl());
        assertNotNull(entity.getVisitedAt());
    }

    @Test
    void testWithEmptyStrings() {
        // When
        VisitedUrlEntity entity = new VisitedUrlEntity("", "");

        // Then
        assertEquals("", entity.getTaskId());
        assertEquals("", entity.getUrl());
        assertNotNull(entity.getVisitedAt());
    }

    @Test
    void testVisitedAtImmutable() {
        // Given
        LocalDateTime originalTime = visitedUrlEntity.getVisitedAt();
        
        // When
        try {
            Thread.sleep(1);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        // Then
        assertEquals(originalTime, visitedUrlEntity.getVisitedAt()); // Should not change
    }

    @Test
    void testDifferentTasksSameUrl() {
        // Given
        String taskId1 = "task-001";
        String taskId2 = "task-002";
        String sameUrl = "http://example.com/same-page";

        // When
        VisitedUrlEntity entity1 = new VisitedUrlEntity(taskId1, sameUrl);
        VisitedUrlEntity entity2 = new VisitedUrlEntity(taskId2, sameUrl);

        // Then
        assertEquals(sameUrl, entity1.getUrl());
        assertEquals(sameUrl, entity2.getUrl());
        assertNotEquals(entity1.getTaskId(), entity2.getTaskId());
    }

    @Test
    void testSameTaskDifferentUrls() {
        // Given
        String sameTaskId = "task-001";
        String url1 = "http://example.com/page1";
        String url2 = "http://example.com/page2";

        // When
        VisitedUrlEntity entity1 = new VisitedUrlEntity(sameTaskId, url1);
        VisitedUrlEntity entity2 = new VisitedUrlEntity(sameTaskId, url2);

        // Then
        assertEquals(sameTaskId, entity1.getTaskId());
        assertEquals(sameTaskId, entity2.getTaskId());
        assertNotEquals(entity1.getUrl(), entity2.getUrl());
    }
}
