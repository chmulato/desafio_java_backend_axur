package com.mulato.axur.entity;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.*;

class CrawlResultEntityTest {

    private CrawlResultEntity crawlResultEntity;
    private String testTaskId;
    private String testUrl;

    @BeforeEach
    void setUp() {
        testTaskId = "test-123";
        testUrl = "http://example.com/page1";
        crawlResultEntity = new CrawlResultEntity(testTaskId, testUrl);
    }

    @Test
    void testConstructorWithParameters() {
        // When
        CrawlResultEntity entity = new CrawlResultEntity(testTaskId, testUrl);

        // Then
        assertEquals(testTaskId, entity.getTaskId());
        assertEquals(testUrl, entity.getUrl());
        assertNotNull(entity.getFoundAt());
        assertNull(entity.getId()); // ID is generated by database
    }

    @Test
    void testDefaultConstructor() {
        // When
        CrawlResultEntity entity = new CrawlResultEntity();

        // Then
        assertNull(entity.getId());
        assertNull(entity.getTaskId());
        assertNull(entity.getUrl());
        assertNull(entity.getFoundAt());
    }

    @Test
    void testSettersAndGetters() {
        // Given
        CrawlResultEntity entity = new CrawlResultEntity();
        Long testId = 1L;
        LocalDateTime testTime = LocalDateTime.now();

        // When
        entity.setId(testId);
        entity.setTaskId("new-task-id");
        entity.setUrl("http://new-url.com");
        entity.setFoundAt(testTime);

        // Then
        assertEquals(testId, entity.getId());
        assertEquals("new-task-id", entity.getTaskId());
        assertEquals("http://new-url.com", entity.getUrl());
        assertEquals(testTime, entity.getFoundAt());
    }

    @Test
    void testFoundAtSetAutomatically() {
        // Given
        LocalDateTime beforeCreation = LocalDateTime.now().minusSeconds(1);
        
        // When
        CrawlResultEntity entity = new CrawlResultEntity(testTaskId, testUrl);
        
        // Then
        LocalDateTime afterCreation = LocalDateTime.now().plusSeconds(1);
        assertTrue(entity.getFoundAt().isAfter(beforeCreation));
        assertTrue(entity.getFoundAt().isBefore(afterCreation));
    }

    @Test
    void testEqualsAndHashCode() {
        // Given
        CrawlResultEntity entity1 = new CrawlResultEntity(testTaskId, testUrl);
        entity1.setId(1L);
        
        CrawlResultEntity entity2 = new CrawlResultEntity(testTaskId, testUrl);
        entity2.setId(1L);
        
        CrawlResultEntity entity3 = new CrawlResultEntity(testTaskId, testUrl);
        entity3.setId(2L);

        // Test reflexivity
        assertEquals(entity1, entity1);
        
        // Test symmetry (assuming equals is based on ID)
        assertEquals(entity1, entity2);
        assertEquals(entity2, entity1);
        
        // Test with different objects
        assertNotEquals(entity1, entity3);
        assertNotEquals(entity1, null);
        assertNotEquals(entity1, "string");
    }

    @Test
    void testToString() {
        // When
        String toString = crawlResultEntity.toString();

        // Then
        assertNotNull(toString);
        assertTrue(toString.contains(testTaskId));
        assertTrue(toString.contains(testUrl));
    }

    @Test
    void testWithLongUrl() {
        // Given
        String longUrl = "http://example.com/" + "a".repeat(900); // Test with long URL
        
        // When
        CrawlResultEntity entity = new CrawlResultEntity(testTaskId, longUrl);
        
        // Then
        assertEquals(testTaskId, entity.getTaskId());
        assertEquals(longUrl, entity.getUrl());
        assertNotNull(entity.getFoundAt());
    }

    @Test
    void testWithEmptyStrings() {
        // When
        CrawlResultEntity entity = new CrawlResultEntity("", "");

        // Then
        assertEquals("", entity.getTaskId());
        assertEquals("", entity.getUrl());
        assertNotNull(entity.getFoundAt());
    }

    @Test
    void testFoundAtImmutable() {
        // Given
        LocalDateTime originalTime = crawlResultEntity.getFoundAt();
        
        // When
        try {
            Thread.sleep(1);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        // Then
        assertEquals(originalTime, crawlResultEntity.getFoundAt()); // Should not change
    }
}
